from fastapi import FastAPI, Request
from prometheus_fastapi_instrumentator import Instrumentator
from prometheus_client import Counter, Histogram
import time
import logging

# ====== LOGGING ======
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ====== METRIQUES PROMETHEUS ======

# 1. Nombre total d'inf√©rences du mod√®le
model_inference_count = Counter(
    "ml_model_inference_total",
    "Nombre total d'inf√©rences r√©alis√©es par le mod√®le"
)

# 2. Nombre total de requ√™tes √©chou√©es
failed_request_count = Counter(
    "failed_requests_total",
    "Nombre total de requ√™tes ayant √©chou√©"
)

# 3. Nombre total de requ√™tes r√©ussies
successful_request_count = Counter(
    "successful_requests_total",
    "Nombre total de requ√™tes trait√©es avec succ√®s"
)

# 4. Temps de r√©ponse des requ√™tes
request_duration = Histogram(
    "request_duration_seconds",
    "Temps de traitement de chaque requ√™te"
)

# ====== FONCTION D'AJOUT AU SERVEUR FASTAPI ======
def add_monitoring(app: FastAPI):
    try:
        instrumentator = Instrumentator()
        instrumentator.instrument(app).expose(app, endpoint="/metrics")
        logger.info("‚úÖ Monitoring Prometheus activ√© sur /metrics")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'ajout du monitoring Prometheus : {str(e)}")
        logger.exception("Stack trace : ")

# ====== MIDDLEWARE POUR LES METRIQUES MANUELLES ======
async def metrics_middleware(request: Request, call_next):
    start = time.time()
    try:
        response = await call_next(request)
        successful_request_count.inc()
        return response
    except Exception:
        failed_request_count.inc()
        raise
    finally:
        duration = time.time() - start
        request_duration.observe(duration)

# ====== A UTILISER DANS LE CODE DE PREDICTION POUR COMPTER ======
def increment_inference_count():
    try:
        model_inference_count.inc()
        logger.debug("üìà Incr√©mentation de model_inference_count")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'incr√©mentation du compteur d'inf√©rence : {str(e)}")
        logger.exception("Stack trace : ")
